# Basic Dictionary Operations:
# Create a dictionary with 3 key-value pairs and print it.
# Access the value associated with the key "age" from the dictionary {"name": "Alice", "age": 25}.
# Add a new key-value pair "city": "New York" to the dictionary {"name": "Alice", "age": 25}.
# Update the value of the key "age" to 30 in the dictionary {"name": "Alice", "age": 25}.
# Remove the key "age" from the dictionary using the pop() method.
# Dictionary Methods:
# Given the dictionary {"apple": 2, "banana": 4, "cherry": 6}, check if the key "banana" exists.
# Write a program to print all the keys and values in the dictionary {"name": "Alice", "age": 25, "city": "New York"}.
# Create a program that returns the number of key-value pairs in a dictionary.
# How do you clear all the elements from the dictionary {"name": "Alice", "age": 25}?
# Merge two dictionaries {"name": "Alice"} and {"age": 25, "city": "New York"} into one dictionary.
# Looping through Dictionaries:
# Write a program that loops through a dictionary and prints both the key and value.
# Given a dictionary {"a": 1, "b": 2, "c": 3}, loop through the dictionary and create a new dictionary where the values are doubled.
# Write a Python program to print only the keys of a dictionary.
# Write a Python program to print only the values of a dictionary.
# Given a dictionary of students and their scores {"Alice": 85, "Bob": 90, "Charlie": 78}, find the student with the highest score.
# Dictionary Comprehensions:
# Create a dictionary where the keys are numbers from 1 to 5, and the values are the squares of the keys.
# Write a dictionary comprehension that filters out keys with values less than 10 from {"a": 5, "b": 12, "c": 8}.
# Given a list ["a", "b", "c"] and a list of numbers [1, 2, 3], create a dictionary mapping each letter to its corresponding number.
# Write a program that takes a dictionary and swaps its keys and values (e.g., {"a": 1, "b": 2} becomes {1: "a", 2: "b"}).
# Write a dictionary comprehension that reverses the key-value pairs of the dictionary {"a": 1, "b": 2, "c": 3}.
# Nested Dictionaries:
# Create a dictionary with student names as keys and their details (age, grade) as values.
# Given a dictionary of employees, where each employee is another dictionary (with keys like "age" and "position"), write a program to print the position of a specific employee.
# Write a program to flatten a nested dictionary. For example, {"a": {"b": 1, "c": 2}} becomes {"a.b": 1, "a.c": 2}.
# Given a nested dictionary of grades for each student, write a program that calculates the average grade for each student.
# Write a program to access an element in a deeply nested dictionary (e.g., {"a": {"b": {"c": {"d": 5}}}}).
# Dictionary Problem-Solving:
# Write a Python program to count the number of occurrences of each word in a given string using a dictionary.
# Given two dictionaries, write a Python program to combine them, adding values for keys that appear in both dictionaries.
# Write a Python program to sort a dictionary by its values in ascending order.
# Write a program that takes a list of tuples (key-value pairs) and converts it into a dictionary.
# Given a dictionary of products and their prices, write a program that finds the product with the lowest price.
# Advanced Dictionary Practice:
# Write a program that takes a list of dictionaries (representing students) and returns a new dictionary with the names of students as keys and their average grade as the value.
# Given a dictionary {"apple": 2, "banana": 4, "cherry": 6}, write a program to create a new dictionary that contains only the items where the value is greater than 3.
# Write a Python program to merge multiple dictionaries into one.
# Write a function that accepts a dictionary and returns a new dictionary where all keys are converted to uppercase.
# Given a list of dictionaries, write a Python program to group them by a common key (e.g., grouping by "age").